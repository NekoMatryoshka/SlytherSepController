/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package uk.ac.herts.cs.sep.slyther.gui;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.lang.reflect.Field;
import java.time.LocalDateTime;
import java.util.*;
import javax.swing.DefaultListModel;
import javax.swing.SwingWorker;
import net.gegy1000.slyther.client.SlytherClient;
import net.gegy1000.slyther.client.controller.IController;
import net.gegy1000.slyther.client.game.entity.ClientSnake;
import net.gegy1000.slyther.game.entity.Snake;
import uk.ac.herts.cs.sep.slyther.orm.PlayerSnake;
import uk.ac.herts.cs.sep.slyther.util.DB;

/**
 *
 * @author jw17aca
 */
public class SnakeListBean extends javax.swing.JPanel implements SnakeDiesEventListener {

    private ArrayList<PlayerSnake> snakes;

    /**
     * Creates new form SnakeListBean
     */
    public SnakeListBean() {
        snakes = new ArrayList<>();
        List<PlayerSnake> dataBaseSnakes = DB.getAllPlayerSnake();
        snakes.addAll(dataBaseSnakes);
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        SnakeList = new javax.swing.JList<>();

        SnakeList.setFont(new java.awt.Font("Times New Roman", 0, 18)); // NOI18N
        SnakeList.setModel(new DefaultListModel<PlayerSnake>() {
            public int getSize() { return snakes.size(); }
            public PlayerSnake getElementAt(int i) { return snakes.get(i); }
        });
        SnakeList.setCellRenderer(new SnakeCellRenderer());
        SnakeList.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(SnakeList);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 377, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JList<PlayerSnake> SnakeList;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables

    public ArrayList<PlayerSnake> getSnakes() {
        return snakes;
    }

    public void setSnakes(ArrayList<PlayerSnake> snakes) {
        this.snakes = snakes;
    }

    public boolean contains(int index) {
        return (index >= 0) && (index < snakes.size());
    }

    public PlayerSnake getSnake(int index) {
        if (contains(index)) {
            return snakes.get(index);
        } else {
            return null;
        }
    }

    public void setSnake(int index, PlayerSnake snake) {
        if (contains(index)) {
            snakes.set(index, snake);
        }
    }

    public void addSnake(PlayerSnake snake) {
        snakes.add(snake);
    }

    private void update(SnakeDiesEvent event) {
        final SnakeListBean thisBean = this;

        SwingWorker worker = new SwingWorker() {

            PlayerSnake playerSnake = null;

            @Override
            protected Object doInBackground() throws Exception {
                ListenerClient client = event.getClient();
                playerSnake = client.playerSnake;
                return null;
            }

            //called on event dispatch thread
            public void done() {
                System.out.println("done(): " + playerSnake.toString());
                snakes.add(playerSnake);
                SnakeList.setModel(new DefaultListModel<PlayerSnake>() {
                    public int getSize() {
                        return thisBean.snakes.size();
                    }

                    public PlayerSnake getElementAt(int i) {
                        return thisBean.snakes.get(i);
                    }
                });
                DB.insertPlayerSnake(playerSnake);
            }
        };

        worker.execute();
    }

    @Override
    public void snakeDies(SnakeDiesEvent event) {
        update(event);
    }

}
